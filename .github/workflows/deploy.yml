name: Deploy to AWS EC2 with Docker Hub

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Backend Docker image
        working-directory: ./backend
        run: |
          docker buildx build --platform linux/amd64 -t ${{ secrets.DOCKERHUB_USERNAME }}/polling-app-backend:latest --push .

      - name: Build and push Frontend Docker image
        working-directory: ./frontend
        env:
          NEXT_PUBLIC_BACKEND_URL: http://${{ secrets.AWS_EC2_IP }}:10000
          NEXT_PUBLIC_WS_URL: ws://${{ secrets.AWS_EC2_IP }}:10000/ws
        run: |
          docker buildx build --platform linux/amd64 \
            --build-arg NEXT_PUBLIC_BACKEND_URL=$NEXT_PUBLIC_BACKEND_URL \
            --build-arg NEXT_PUBLIC_WS_URL=$NEXT_PUBLIC_WS_URL \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/polling-app-frontend:latest --push .

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.AWS_EC2_IP }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        env:
          AWS_EC2_IP: ${{ secrets.AWS_EC2_IP }}
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.AWS_EC2_IP }} << 'EOF'
            # Install Git if not present
            sudo apt update -y
            sudo apt install -y git

            # Install Docker if not present
            sudo apt install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker ubuntu

            # Install Docker Compose if not present
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose

            # Clone the repository if it doesn't exist
            if [ ! -d "polling_app" ]; then
              git clone https://github.com/Yaswanth-Vempuluru-7916/polling_app.git
            fi

            # Navigate to the project directory
            cd polling_app

            # Pull the latest code
            git pull origin main

            # Ensure backend/.env exists with the correct Elastic IP
            echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" > backend/.env
            echo "PORT=10000" >> backend/.env
            echo "RP_ID=${{ secrets.AWS_EC2_IP }}" >> backend/.env
            echo "RP_ORIGIN=http://${{ secrets.AWS_EC2_IP }}:3000" >> backend/.env
            echo "RP_NAME=Polling App" >> backend/.env

            # Refresh group membership for Docker (to avoid permission issues)
            newgrp docker << 'INNER_EOF'
              # Stop any running containers
              docker-compose down

              # Start the app
              docker-compose up -d
            INNER_EOF

            # If the above fails, try with sudo as a fallback
            if [ $? -ne 0 ]; then
              sudo docker-compose down
              sudo docker-compose up -d
            fi
          EOF

      - name: Notify Discord on Success
        if: success()
        run: |
          curl -X POST -H "Content-Type: application/json" \
            -d '{"content": "Deployment successful! Polling app is live at http://${{ secrets.AWS_EC2_IP }}:3000"}' \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Notify Discord on Failure
        if: failure()
        run: |
          curl -X POST -H "Content-Type: application/json" \
            -d '{"content": "Deployment failed! Check GitHub Actions logs."}' \
            ${{ secrets.DISCORD_WEBHOOK_URL }}